import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

import sys
import subprocess
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import time

from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime, time as dtime
import asyncio

from threading import Thread
from flask import Flask

from bs4 import BeautifulSoup

TOKEN = "8061572609:AAEo_zTrZ1wy3x53JswwlQYpwogsmE7bkgg"  # –∑–∞–º—ñ–Ω–∏ –Ω–∞ –Ω–æ–≤–∏–π —Ç–æ–∫–µ–Ω!


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–Ω–∏–∂–æ–∫ –∑—ñ Steam
def get_discounted_games():
    url = "https://store.steampowered.com/api/featuredcategories?cc=ua&l"
    response = requests.get(url).json()
    discounted = response.get("specials", {}).get("items", [])

    games_on_sale = []
    for game in discounted:
        name = game.get("name")
        discount = game.get("discount_percent")
        if discount > 0:
            price = game.get("final_price") / 100
            old_price = game.get("original_price") / 100
            games_on_sale.append(f"{name}: -{discount}% ‚Üí {price}‚Ç¨ (–±—É–ª–æ {old_price}‚Ç¨)")
    return games_on_sale[:20]  # –º–∞–∫—Å–∏–º—É–º 5


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–Ω–∏–∂–∫–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –≥—Ä—É (Valheim)
def get_valheim_discount():
    url = "https://store.steampowered.com/api/storesearch/?term=Valheim&cc=ua&l"
    response = requests.get(url).json()
    games = response.get("items", [])

    steam_link = "https://store.steampowered.com/app/892970/Valheim/"

    for game in games:
        if "Valheim" in game.get("name", ""):
            discount = game.get("discount_percent", 0)
            final_price = game.get("final_price")
            original_price = game.get("original_price")

            # –ö–ª—ñ–∫–∞–±–µ–ª—å–Ω–∞ –Ω–∞–∑–≤–∞ –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º
            game_name_linked = f'<a href="{steam_link}">Valheim</a>'

            if final_price is not None:
                price = final_price / 100
                if discount > 0 and original_price is not None:
                    old_price = original_price / 100
                    return f"{game_name_linked}: -{discount}% ‚Üí {price}‚Ç¨ (–±—É–ª–æ {old_price}‚Ç¨)"
                else:
                    return f"{game_name_linked}: {price}‚Ç¨ (–±–µ–∑ –∑–Ω–∏–∂–∫–∏)"
            else:
                return f"{game_name_linked}: —Ü—ñ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ üò¢"

    return "–ì—Ä—É Valheim –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üò¢"

def get_free_games():
    url = "https://store.steampowered.com/api/featuredcategories?cc=ua&l"
    response = requests.get(url).json()
    discounted = response.get("specials", {}).get("items", [])

    free_games = []
    for game in discounted:
        discount = game.get("discount_percent", 0)
        if discount == 100:
            name = game.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∏")
            original_price = game.get("original_price", 0) / 100
            free_games.append(f"{name}: üéâ <b>–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ</b> (–±—É–ª–æ {original_price}‚Ç¨)")

    return free_games[:20]  # –º–∞–∫—Å–∏–º—É–º 20

def get_90_discount_games_from_page(offset=0):
    url = f"https://store.steampowered.com/specials/?l=ukrainian&offset={offset}"
    headers = {"User-Agent": "Mozilla/5.0"}
    response = requests.get(url, headers=headers)
    soup = BeautifulSoup(response.text, "html.parser")

    game_blocks = soup.select(".tab_item")
    result = []

    for block in game_blocks:
        title = block.select_one(".tab_item_name").get_text(strip=True)
        discount_block = block.select_one(".discount_pct")
        if not discount_block:
            continue
        discount_text = discount_block.get_text(strip=True).replace("-", "").replace("%", "")
        try:
            discount_percent = int(discount_text)
        except ValueError:
            continue

        if discount_percent >= 90:
            old_price = block.select_one(".discount_original_price").get_text(strip=True)
            final_price = block.select_one(".discount_final_price").get_text(strip=True)
            result.append(f"{title}: -{discount_percent}% ‚Üí {final_price} (–±—É–ª–æ {old_price})")

    return result

def get_all_90_discount_games():
    all_games = []
    for offset in range(0, 240, 60):  # offset: 0, 60, 120, 180, 240
        games = get_90_discount_games_from_page(offset)
        all_games.extend(games)
    return all_games[:20]  # –º–∞–∫—Å–∏–º—É–º 20 –Ω–∞–π–≤–∏–≥—ñ–¥–Ω—ñ—à–∏—Ö


# –°—Ç–∞—Ä—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üéÆ –ü–æ–∫–∞–∑–∞—Ç–∏ –∑–Ω–∏–∂–∫–∏", callback_data="show_discounts")],
        [InlineKeyboardButton("üî® Valheim", callback_data="show_valheim")],
        [InlineKeyboardButton("üÜì –Ü–≥—Ä–∏ 100%", callback_data="show_free_games")],
        [InlineKeyboardButton("üíØ –ó–Ω–∏–∂–∫–∞ 90%", callback_data="get_all_90_discount_games")],
        [InlineKeyboardButton("üíØ –ó–Ω–∏–∂–∫–∞ –∑ 90%", callback_data="get_90_discount_games_from_page")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –∑–Ω–∏–∂–∫–∏ –Ω–∞ Steam:",
                                    reply_markup=reply_markup)


# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "show_discounts":
        games = get_discounted_games()
        if games:
            message = "üéÆ <b>–ó–Ω–∏–∂–∫–∏ –≤ Steam:</b>\n" + "\n".join(games)
        else:
            message = "–ó–∞—Ä–∞–∑ –Ω–µ–º–∞—î –∑–Ω–∏–∂–æ–∫ üò¢"
        await query.edit_message_text(message, parse_mode="HTML")

    elif query.data == "show_valheim":
        valheim_discount = get_valheim_discount()
        await query.edit_message_text(valheim_discount, parse_mode="HTML")

    elif query.data == "show_free_games":
        free_games = get_free_games()
        if free_games:
            message = "üÜì <b>–Ü–≥—Ä–∏ –∑—ñ –∑–Ω–∏–∂–∫–æ—é 100%:</b>\n" + "\n".join(free_games)
        else:
            message = "–ó–∞—Ä–∞–∑ –Ω–µ–º–∞—î –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö —ñ–≥–æ—Ä üò¢"
        await query.edit_message_text(message, parse_mode="HTML")

    elif query.data == "get_all_90_discount":
        games = get_all_90_discount_games()
        if games:
            message = "üíØ <b>–Ü–≥—Ä–∏ –∑—ñ –∑–Ω–∏–∂–∫–æ—é 90% —ñ –±—ñ–ª—å—à–µ:</b>\n" + "\n".join(games)
        else:
            message = "–ó–∞—Ä–∞–∑ –Ω–µ–º–∞—î —ñ–≥–æ—Ä –∑—ñ –∑–Ω–∏–∂–∫–æ—é 90% üò¢"
        await query.edit_message_text(message, parse_mode="HTML")

    elif query.data == "show_90_discounts":
        games = get_all_90_discount_games()
        if games:
            message = "üíØ <b>–Ü–≥—Ä–∏ –∑—ñ –∑–Ω–∏–∂–∫–æ—é 90% —ñ –±—ñ–ª—å—à–µ:</b>\n" + "\n".join(games)
        else:
            message = "–ó–∞—Ä–∞–∑ –Ω–µ–º–∞—î —ñ–≥–æ—Ä –∑—ñ –∑–Ω–∏–∂–∫–æ—é 90% üò¢"
        await query.edit_message_text(message, parse_mode="HTML")


async def send_daily_discounts(application):
    games = get_discounted_games()
    if games:
        message = "üéÆ <b>–©–æ–¥–µ–Ω–Ω—ñ –∑–Ω–∏–∂–∫–∏ –≤ Steam:</b>\n" + "\n".join(games)
    else:
        message = "–°—å–æ–≥–æ–¥–Ω—ñ –Ω–µ–º–∞—î –∑–Ω–∏–∂–æ–∫ üò¢"

    await application.bot.send_message(
        chat_id="1182819676",  # ‚Üê —Ç–≤—ñ–π Chat ID
        text=message,
        parse_mode="HTML"
    )

def schedule_daily_job(application):
    scheduler = BackgroundScheduler(timezone="Europe/Kyiv")
    scheduler.add_job(
        lambda: asyncio.create_task(send_daily_discounts(application)),
        trigger='cron',
        hour=19,
        minute=20
    )
    scheduler.start()

app = Flask('')

@app.route('/')
def home():
    return "Steam Discount Bot is alive!"

def run():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run)
    t.start()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    keep_alive()
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex('^Start$'), start))
    app.add_handler(CallbackQueryHandler(button_handler))

    schedule_daily_job(app)

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –û—á—ñ–∫—É—é –∫–æ–º–∞–Ω–¥–∏ /start...")
    app.run_polling()

#8061572609:AAHDDh11pyNLkhujAELqfEKb6DSu2YzZm1U
#'chat': {'id': 1182819676}